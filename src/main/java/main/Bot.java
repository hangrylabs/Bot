package main;

import ability.Cooldown;
import database.dao.*;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.io.FileNotFoundException;
import java.sql.Connection;

import java.text.SimpleDateFormat;
import java.time.LocalTime;

import java.util.*;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import java.util.function.Consumer;


public class Bot extends TelegramLongPollingBot {
	private final PlayerDAO playerDAO;
	private final InventoryDAO inventoryDAO;
	private final ItemDAO itemDAO;
	private final ShopDAO shopDAO;
	private final StatsDAO statsDAO;
	private final AbilityDAO abilityDAO;

	private static final Roller<Item> mudRoller = RollerFactory.getMudRoller(new Random());
	private static final Roller<Integer> moneyRoller = RollerFactory.getMoneyRoller(new Random());
	private static final Roller<Item> findRoller = RollerFactory.getFindRoller(new Random());
	private static final Roller<Item> fishRoller = RollerFactory.getFishRoller(new Random());

	ScheduledFuture<?> sf_timers;
	ScheduledFuture<?> sf_find;
	private final long expStepS = 5L;
	ScheduledFuture<?> sf_pockets;
	ScheduledFuture<?> sf_dump;

	public final long findCooldown = 20L * 60L * 1000L;
	public final long pocketsCooldown = 30L * 1000L;

	private final String token;

	Map<Long, Player> active_players;

	Map<Player.State, BiConsumer<Player, Message>> state_processor;
	Map<String, Consumer<Player>> command_processor;

	public Bot(Connection connection) throws FileNotFoundException {
		playerDAO = new PlayerDAO(connection, this);
		inventoryDAO = new InventoryDAO(connection);
		itemDAO = new ItemDAO(connection);
		shopDAO = new ShopDAO(connection, this);
		statsDAO = new StatsDAO(connection);
		abilityDAO = new AbilityDAO(connection, this);
		token = init_token();
		state_processor = BotStateProcessor.get_map(this);
		command_processor = BotCommandProcessor.get_map(this);
		active_players = new HashMap<>();
		sf_timers = STPE.stpe.scheduleAtFixedRate(this::cleanShopFromExpired, 0L, 5L, TimeUnit.SECONDS);
		sf_find = STPE.stpe.scheduleAtFixedRate(this::sendFindCooldownNotification, 0L, expStepS, TimeUnit.SECONDS);
		sf_pockets = STPE.stpe.scheduleAtFixedRate(abilityDAO::expirePockets, 0L, expStepS, TimeUnit.SECONDS);  // remove this shit
		sf_dump = STPE.stpe.scheduleAtFixedRate(this::dump_database, 1L, 1L, TimeUnit.MINUTES);
	}

	public void sendMsg(Long chatId, String text) {
		SendMessage sendMessage = new SendMessage(chatId.toString(), text);
		sendMessage.enableMarkdown(true);

		//–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–∞ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∏—Ç—å
		//sendMessage.setReplyToMessageId(message.getMessageId());

		sendMessage.setText(text);
		try {
			//–¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–º–µ—Å—Ç–∏–ª–∏ –≤ –Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			setButtons(sendMessage);
			execute(sendMessage);
		} catch (TelegramApiException e) {
			e.printStackTrace();
		}
	}

	public void setButtons(SendMessage sendMessage) {
		long id = Long.parseLong(sendMessage.getChatId());
		Player player = playerDAO.get_by_id(id);
		//–∏–Ω–∏—Ü–∏–∞–ª–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
		//—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
		sendMessage.setReplyMarkup(replyKeyboardMarkup);
		//–≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤–∏–¥–µ–ª –∏–ª–∏ –Ω–µ—Ç)
		replyKeyboardMarkup.setSelective(true);
		replyKeyboardMarkup.setResizeKeyboard(true);
		//—Å–∫—Ä—ã–≤–∞—Ç—å –∏–ª–∏ –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
		replyKeyboardMarkup.setOneTimeKeyboard(true);

		List<KeyboardRow> keyboardRowList = new ArrayList<>();
		KeyboardRow keyboardFirstRow = new KeyboardRow();
		KeyboardRow keyboardSecondRow = new KeyboardRow();
		KeyboardRow keyboardThirdRow = new KeyboardRow();
		KeyboardRow keyboardFourthRow = new KeyboardRow();
		//–¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–µ—Ä–≤—ã–π —Ä—è–¥
		//KeyboardButton startButton = new KeyboardButton("/start");

		if (player == null) {
			keyboardFirstRow.add(new KeyboardButton("‚≠ê –ù–∞—á–∞—Ç—å"));
			//keyboardFirstRow.add(new KeyboardButton("/start"));
		} else {


			keyboardFirstRow.add(new KeyboardButton("\uD83C\uDF92 –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"));
			keyboardSecondRow.add(new KeyboardButton("\uD83D\uDC8E –ò—Å–∫–∞—Ç—å —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã"));
			keyboardSecondRow.add(new KeyboardButton("\uD83D\uDD26 –†—ã—Ç—å—Å—è –≤ –≥—Ä—è–∑–∏"));
			keyboardSecondRow.add(new KeyboardButton("\uD83E\uDDF6 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä–º–∞–Ω—ã"));


			keyboardFirstRow.add(new KeyboardButton("\uD83C\uDF3A –ü–æ–º–æ—â—å"));
			keyboardFirstRow.add(new KeyboardButton("‚≠êÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂"));


			keyboardThirdRow.add(new KeyboardButton("\uD83D\uDCB0 –ú–æ–Ω–µ—Ç–∫–∞"));
			keyboardThirdRow.add(new KeyboardButton("\uD83D\uDED2 –ú–∞–≥–∞–∑–∏–Ω"));
			keyboardThirdRow.add(new KeyboardButton("\uD83D\uDCDE –°–∫—É–ø—â–∏–∫"));

			keyboardFourthRow.add(new KeyboardButton("\uD83C\uDF80 –¢–æ–ø 10"));
			keyboardFourthRow.add(new KeyboardButton("\uD83D\uDEE0 –ü—Ä–æ–¥–∞—Ç—å Cheap"));


			keyboardFourthRow.add(new KeyboardButton("üê° –†—ã–±–∞—á–∏—Ç—å"));
			keyboardFourthRow.add(new KeyboardButton("\uD83E\uDD88 –°–¥–∞—Ç—å —Ä—ã–±—É"));


			//keyboardFirstRow.add(new KeyboardButton("/me"));

		}

		//keyboardFirstRow.add(new KeyboardButton("/find"));
		//–¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ø–∏–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
		keyboardRowList.add(keyboardFirstRow);
		keyboardRowList.add(keyboardSecondRow);
		keyboardRowList.add(keyboardThirdRow);
		keyboardRowList.add(keyboardFourthRow);
		replyKeyboardMarkup.setKeyboard(keyboardRowList);

	}

	@Override
	public void onUpdateReceived(Update update) {
		Message message = update.getMessage();

		if (message != null && message.hasText()) {
			long id = message.getChatId();
			String text = message.getText();

			Player player;
			if (active_players.containsKey(id)) {
				player = active_players.get(id);
			} else {
				player = playerDAO.get_by_id(id);
			}

			System.out.printf("%s: %s [from %s | %d]\n", new Date(), text, player != null ? player.getUsername() : "new player", id);

			if (player == null) {
				if (text.equals("/start")) {
					player = new Player(id, this);
					active_players.put(id, player);
					statsDAO.put(player.getStats(), player.getId());
					playerDAO.put(player);
					abilityDAO.put(id);

					sendMsg(id, "\uD83C\uDF77 –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Needle");
					sendMsg(id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫: ");
				} else {
					sendMsg(id, "‚≠ê –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
				}
			} else {
				state_processor.get(player.getState()).accept(player, message);
			}
		}
	}

	void awaitingNickname_processor(Player player, Message message) {
		long player_id = player.getId();
		String username = message.getText();
		Item tag = itemDAO.getByName("\uD83D\uDCDD –¢–µ–≥");
		//regex –¥–ª—è –Ω–∏–∫–∞
		String usernameTemplate = "([–ê-–Ø–∞-—èA-Za-z0-9]{3,32})";
		if (username.matches(usernameTemplate)) {
			try {
				Player new_player = playerDAO.get_by_name(username);
				if (new_player == null) {
					player.setUsername(username);
					player.setState(Player.State.awaitingCommands);
					playerDAO.update(player);
					active_players.remove(player_id);
					sendMsg(player_id, "–ò–≥—Ä–æ–∫ `" + player.getUsername() + "` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
					command_help(player);
				} else {
					throw new RuntimeException("REx");
				}
			} catch (RuntimeException e)  // TODO change to some reasonable <? extends Exception> class
			{
				e.printStackTrace();
				sendMsg(player_id, "‚ö†\t –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
			}
		} else {
			sendMsg(player_id, "‚ö†\t –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫: ");
		}
	}

	void awaitingSellArguments_processor(Player player, Message message) {
		long player_id = player.getId();
		try {
			Inventory inventory = player.getInventory();
			String sellID = message.getText();
			int sell_id = Integer.parseInt(sellID);
			Item item = inventory.getItem(sell_id);
			player.balance += item.getCost();
			inventory.removeItem(sell_id);
			inventoryDAO.delete(player_id, item.getId(), 1);

			playerDAO.update(player);
			sendMsg(player_id, "‚úÖ –ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω | + $" + item.getCost());
		} catch (NumberFormatException e) {
			e.printStackTrace();
			sendMsg(player_id, "‚ö†\t –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ");
		} catch (IndexOutOfBoundsException ee) {
			ee.printStackTrace();
			sendMsg(player_id, "‚ö†\t –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID");
		}
		active_players.remove(player_id);
	}

	void awaitingCommand_processor(Player player, Message message) {
		String text = message.getText();
		if (command_processor.containsKey(text)) {
			command_processor.get(text).accept(player);
		} else {
			sendMsg(player.getId(), "‚ö†\t –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n");
		}
	}


	void awaitingChangeNickname_processor(Player player, Message message) {
		long player_id = player.getId();
		String nickname = message.getText();
		Item tag = itemDAO.getByName("\uD83D\uDCDD –¢–µ–≥");
		//regex –¥–ª—è –Ω–∏–∫–∞
		String usernameTemplate = "([–ê-–Ø–∞-—èA-Za-z0-9]{3,32})";
		if (nickname.matches(usernameTemplate)) {
			try {
				player.setUsername(nickname);
				playerDAO.update(player);
                inventoryDAO.delete(player.getId(), tag.getId(), 1);
				sendMsg(player_id, "–í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `" + player.getUsername() + "`");
			} catch (RuntimeException e) {
				e.printStackTrace();
				sendMsg(player_id, "–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º —É–∂–µ –µ—Å—Ç—å");
			}
		} else {
			sendMsg(player_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫");
		}
		active_players.remove(player_id);
	}

	void coinDash_processor(Player player, Message message) {
		long player_id = player.getId();
		String dash = message.getText();
		try {
			int i_dash = Integer.parseInt(dash);

			if (i_dash > 0 && i_dash <= player.balance) {
				sendMsg(player_id, "\uD83C\uDFB0 –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: $" + i_dash);

				sendMsg(player_id, "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...");

				Cooldown kd = new Cooldown(2, () -> coin_dash_callback(player, i_dash));
				kd.startCooldown();
			} else {
				sendMsg(player_id, "‚ö†\t –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—É–º–º—ã");
			}
		} catch (NumberFormatException e) {
			sendMsg(player_id, "‚ö†\t–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º");
			e.printStackTrace();
		}
		active_players.remove(player_id);
	}

	void shopBuy_processor(Player player, Message message) {
		try {
			int userInput = Integer.parseInt(message.getText());

			synchronized (shopDAO) {
				ShopItem wanted_item = shopDAO.getByID(userInput);
				Item item = wanted_item.getItem();
				int itemCost = wanted_item.getCost();
				Player seller = wanted_item.getSeller();

				if (player.getMoney() >= itemCost) {
					player.balance -= itemCost;
					inventoryDAO.putItem(player.getId(), item.getId());
					sendMsg(player.getId(), String.format("\uD83C\uDF6D –ü—Ä–µ–¥–º–µ—Ç `%s` —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω", item));
					sendMsg(seller.getId(), String.format("\uD83D\uDCC8 –í–∞—à –ø—Ä–µ–¥–º–µ—Ç `%s` –∫—É–ø–∏–ª –∏–≥—Ä–æ–∫ `%s` | + $%d", item.getTitle(), player.getUsername(), itemCost));

					seller.balance = seller.balance + itemCost;

					shopDAO.delete(userInput);
					playerDAO.update(player);
					playerDAO.update(seller);
				} else {
					sendMsg(player.getId(), "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤");
				}
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			sendMsg(player.getId(), "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ");  // << –∑–≤—É—á–∏—Ç –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Ö–æ—Ç—è —Å—Ç–µ–π—Ç —Ç—É—Ç –∂–µ –º–µ–Ω—è–µ—Ç—Å—è
			player.setState(Player.State.awaitingCommands);
			playerDAO.update(player);
		} catch (IndexOutOfBoundsException ee) {
			ee.printStackTrace();
			sendMsg(player.getId(), "–ù–µ–≤–µ—Ä–Ω—ã–π ID");
			player.setState(Player.State.awaitingCommands);
			playerDAO.update(player);
		}
		active_players.remove(player.getId());
	}


	void shopPlaceGood_awaitingID_processor(Player player, Message message) {
		try {

			long id = player.getId();
			int itemID = Integer.parseInt(message.getText());
			if (itemID >= player.getInventory().getInvSize()) {
				throw new IndexOutOfBoundsException();
			}else if(player.getInventory().getInvSize() > 20){
				throw new BackpackException(itemID);
			}
			//playerDAO.update(player);
		} catch (NumberFormatException e) {
			e.printStackTrace();
			sendMsg(player.getId(), "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ");
		} catch (IndexOutOfBoundsException ee) {
			ee.printStackTrace();
			sendMsg(player.getId(), "–ù–µ–≤–µ—Ä–Ω—ã–π ID");
		} catch (BackpackException e){
			long id = player.getId();
			Item ii = player.getInventory().getItem(e.backpackID);
			Item backpack = itemDAO.getByName("\uD83C\uDF92 –†—é–∫–∑–∞–∫");
			if(ii.equals(backpack)){
				sendMsg(id, String.format("–ò–∑–±–∞–≤—å—Ç–µ—Å—å –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–∞—Ç—å `%s`", backpack.getTitle()));
				player.setState(Player.State.awaitingCommands);
				playerDAO.update(player);
				active_players.remove(id);
			}else{
				player.to_place_item = e.backpackID;
				sendMsg(player.getId(), "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: ");
				player.setState(Player.State.shopPlaceGood_awaitingCost);
			}
		}
	}


	void shopPlaceGood_awaitingCost_processor(Player player, Message message) {
		long player_id = player.getId();
		try {
			int cost = Integer.parseInt(message.getText());
			if (cost > 0) {
				Inventory inventory = player.getInventory();
				ShopItem shopItem = new ShopItem(inventory.getItem(player.to_place_item), cost, player);
				shopDAO.put(shopItem);

				sendMsg(player_id, String.format("–¢–æ–≤–∞—Ä `%s` –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", inventory.getItem(player.to_place_item).getTitle()));
				inventory.removeItem(player.to_place_item);

				inventoryDAO.delete(player_id, shopItem.getItem().getId(), 1);
				player.setState(Player.State.awaitingCommands);
				playerDAO.update(player);
			} else {
				sendMsg(player_id, "–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–º");
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			sendMsg(player_id, "‚ö†\t –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ");
		}
		active_players.remove(player_id);
	}

	public void payAwaitingNickname_processor(Player player, Message message) {
		long player_id = player.getId();
		String nickname = message.getText();

		if (!nickname.equals(player.getUsername())) {
			Player acceptor = playerDAO.get_by_name(nickname);
			if (acceptor != null) {
				player.payment_acceptor = acceptor;
				player.setState(Player.State.payAwaitingAmount);
				sendMsg(player_id, "\uD83D\uDCB3 –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ");
			} else {
				sendMsg(player_id, "–¢–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
				player.setState(Player.State.awaitingCommands);
			}
		} else {
			sendMsg(player_id, String.format("\uD83C\uDF38 –ò–≥—Ä–æ–∫ `%s` –æ—á–µ–Ω—å –±–æ–≥–∞—Ç –∏ –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –í–∞—à–∏—Ö –∫–æ–ø–µ–π–∫–∞—Ö", player.getUsername()));
		}
	}

	public void payAwaitingAmount_processor(Player player, Message message) {
		try {
			int cost = Integer.parseInt(message.getText());
			if (cost > player.getMoney() || cost <= 0) {
				sendMsg(player.getId(), "‚ö†\t –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞");
			} else {
				Player receiver = player.payment_acceptor;
				player.balance -= cost;
				sendMsg(receiver.getId(), String.format("\uD83D\uDCB3 –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ $%d | –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: `%s` ", cost, player.getUsername()));
				sendMsg(player.getId(), "‚úÖ –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
				receiver.balance += cost;
				player.setState(Player.State.awaitingCommands);
				player.payment_acceptor = null;
				playerDAO.update(receiver);
				playerDAO.update(player);
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			sendMsg(player.getId(), "‚ö†\t –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É");
		}
		active_players.remove(player.getId());
	}

	public void awaitingCoffee_processor(Player player, Message message) {
		long player_id = player.getId();
		String nickname = message.getText();

		if (!nickname.equals(player.getUsername())) {
			Player acceptor = playerDAO.get_by_name(nickname);
			if (acceptor != null) {
				player.coffee_acceptor = acceptor;
				sendMsg(player_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ (48 —Å–∏–º–≤–æ–ª–æ–≤): ");
				player.setState(Player.State.awaitingCoffeeNote);

				/*
				player.balance -= 100;
				acceptor.stats.coffee++;
				statsDAO.update(acceptor.getStats(), acceptor.getId());
				sendMsg(player_id, "‚òï –ö–æ—Ñ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
				sendMsg(acceptor.getId(), String.format("‚òï –ò–≥—Ä–æ–∫ `%s` —É–≥–æ—Å—Ç–∏–ª –≤–∞—Å –∫—Ä—É–∂–µ—á–∫–æ–π –∫–æ—Ñ–µ", player.getUsername()));
				statsDAO.update(acceptor.getStats(), acceptor.getId());
				playerDAO.update(player);
				player.setState(Player.State.awaitingCommands);
				 */
			} else {
				sendMsg(player_id, "–¢–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
				player.setState(Player.State.awaitingCommands);
			}
		} else {
			sendMsg(player_id, "\uD83C\uDF38 –ö–æ—Ñ–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º");
		}

	}


	public void awaitingCoffeeNote_processor(Player player, Message message) {
		try {
			String note = message.getText();
			if (note.length() < 48) {
				Player receiver = player.coffee_acceptor;
				player.balance -= 500;
				receiver.stats.coffee++;
				statsDAO.update(receiver.getStats(), receiver.getId());
				sendMsg(player.getId(), "‚òï –ö–æ—Ñ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
				sendMsg(receiver.getId(), String.format("‚òï –ò–≥—Ä–æ–∫ `%s` —É–≥–æ—Å—Ç–∏–ª –≤–∞—Å –∫—Ä—É–∂–µ—á–∫–æ–π –∫–æ—Ñ–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: `%s`", player.getUsername(), note));
				statsDAO.update(receiver.getStats(), receiver.getId());
				playerDAO.update(player);
				player.setState(Player.State.awaitingCommands);
			} else {
				sendMsg(player.getId(), "–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ, —á–µ–º 48 —Å–∏–º–≤–æ–ª–æ–≤");
			}

		} catch (NumberFormatException e) {
			e.printStackTrace();
			sendMsg(player.getId(), "‚ö†\t –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
		}
		active_players.remove(player.getId());
	}

	public void awaitingTea_processor(Player player, Message message) {
		long player_id = player.getId();
		String nickname = message.getText();

		if (!nickname.equals(player.getUsername())) {
			Player acceptor = playerDAO.get_by_name(nickname);
			if (acceptor != null) {
				player.tea_acceptor = acceptor;
				sendMsg(player_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ (48 —Å–∏–º–≤–æ–ª–æ–≤): ");
				player.setState(Player.State.awaitingTeaNote);
			} else {
				sendMsg(player_id, "–¢–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
				player.setState(Player.State.awaitingCommands);
			}
		} else {
			sendMsg(player_id, "\uD83C\uDF38 –ß–∞–π –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º");
		}

	}

	public void awaitingTeaNote_processor(Player player, Message message) {
		try {
			String note = message.getText();
			if (note.length() < 48) {
				Player receiver = player.tea_acceptor;
				player.balance -= 500;
				receiver.stats.tea++;
				statsDAO.update(receiver.getStats(), receiver.getId());
				sendMsg(player.getId(), "\uD83C\uDF3F –ß–∞–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
				sendMsg(receiver.getId(), String.format("\uD83C\uDF3F –ò–≥—Ä–æ–∫ `%s` —É–≥–æ—Å—Ç–∏–ª –≤–∞—Å –∫—Ä—É–∂–µ—á–∫–æ–π —á–∞—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: `%s`", player.getUsername(), note));
				statsDAO.update(receiver.getStats(), receiver.getId());
				playerDAO.update(player);
				player.setState(Player.State.awaitingCommands);
			} else {
				sendMsg(player.getId(), "–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ, —á–µ–º 48 —Å–∏–º–≤–æ–ª–æ–≤");
			}

		} catch (NumberFormatException e) {
			e.printStackTrace();
			sendMsg(player.getId(), "‚ö†\t –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
		}
		active_players.remove(player.getId());
	}


	public void command_help(Player player) {

		//playerDAO.update(player);

		sendMsg(player.getId(), "\\[`Needle`] –ë–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: \n" +
				"\n" +
				" \\[–ö–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞] \n" +
				"\uD83D\uDD0D /find - –∏—Å–∫–∞—Ç—å —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã \n" +
				"\uD83D\uDD0D /pockets - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä–º–∞–Ω—ã \n" +
				"\uD83D\uDD0D /mud - —Ä—ã—Ç—å—Å—è –≤ –≥—Ä—è–∑–∏ \n" +
				"\n" +
				" \\[–ö–æ–º–∞–Ω–¥—ã –º–∞–≥–∞–∑–∏–Ω–∞] \n" +
				"\uD83D\uDD0D /shopshow - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω \n" +
				"\uD83D\uDD0D /shopplace - –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç \n" +
				"\uD83D\uDD0D /shopbuy - –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç \n" +
				"\n" +
				" \\[–ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞] \n" +
				"\uD83D\uDCC3 /inv - –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å \n" +
				"\uD83D\uDCB0 /sell - –ø—Ä–æ–¥–∞—Ç—å —Å–∫—É–ø—â–∏–∫—É\n" +
				"\uD83D\uDCB3 /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å  \n" +
				"\uD83D\uDCB0 /pay - –ø–µ—Ä–µ—Å–ª–∞—Ç—å –¥–µ–Ω—å–≥–∏ \n" +
				"\uD83D\uDC80 /changenickname - —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º \n" +
				"‚≠ê /me - –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ \n" +
				"\n" +
				" \\[–û–±—â–∏–µ –∫–æ–º–∞–Ω—ã] \n" +
				"\uD83D\uDCE9 /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ \n" +
				"‚Ñπ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ \n" +
				"\uD83C\uDF80 /top - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ \n" +
				"\uD83D\uDCB9 /stats - –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ \n" +
				"\n" +
				" \\[–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è] \n" +
				"\uD83C\uDFB0 /coin - —Å—ã–≥—Ä–∞—Ç—å –≤ –ú–æ–Ω–µ—Ç–∫—É \n" +
				"\uD83C\uDFB0 /tea - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–π \n" +
				"\uD83C\uDFB0 /coffee - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ñ–µ \n" +
				"\n" +
				" \\[–õ–æ–∫–∞—Ü–∏–∏] \n" +

				"\uD83D\uDC80 /forest - –ø–æ—Å–µ—Ç–∏—Ç—å –õ–µ—Å \n" +

				"\uD83D\uDC21 /fish - –ø–æ–π—Ç–∏ –Ω–∞ —Ä—ã–±–∞–ª–∫—É \n"


		);
	}

	public void command_forest(Player player) {
		List<String> explore = new ArrayList<String>();
		explore.add("`–ü–µ—Ç—É–Ω–∏—è`");
		explore.add("`–ì–∞—Ä–¥–µ–Ω–∏—è`");
		explore.add("`–†–æ–º–∞—à–∫–∏`");
		explore.add("`–õ–∏–ª–∏–∏`");
		explore.add("`–õ–∞–Ω–¥—ã—à–∏`");
		explore.add("`–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã`");

		Random r = new Random();
		int random = r.nextInt(explore.size());
		try {
			Item i = itemDAO.getByName("\uD83D\uDD26 –ü–æ–∏—Å–∫–æ–≤—ã–π —Ñ–æ–Ω–∞—Ä—å");
			if (player.getInventory().getItems().contains(i)) {

				sendMsg(player.getId(), "–í –ª–µ—Å—É –≤—ã –Ω–∞—à–ª–∏: " + explore.get(random));

			} else {
				sendMsg(player.getId(), String.format("–î–ª—è –ø–æ—Ö–æ–¥–∞ –≤ –ª–µ—Å –≤–∞–º –Ω—É–∂–µ–Ω –ø—Ä–µ–¥–º–µ—Ç `%s` \n\uD83D\uDED2 –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", i.getTitle()));
			}
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
	}

	public void command_achievements(Player player) {
		long id = player.getId();
		StringBuilder sb = new StringBuilder("–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: \n\n");

		if (player.stats.coffee < 30) {
			sb.append("‚ùå –í—ã–ø–∏—Ç—å 30 –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ\n");
		} else {
			sb.append("‚úÖ –í—ã–ø–∏—Ç—å 30 –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ\n");
		}

		if (player.stats.tea < 30) {
			sb.append("‚ùå –í—ã–ø–∏—Ç—å 30 –∫—Ä—É–∂–µ–∫ —á–∞—è\n");
		} else {
			sb.append("‚úÖ –í—ã–ø–∏—Ç—å 30 –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ\n");
		}

		sendMsg(id, sb.toString());

	}

	public void command_fish(Player player) {
		//Item i = new Item(46, "–£–¥–æ—á–∫–∞", ItemRarity.Rare, 5000);
		Item i = itemDAO.getByName("\uD83D\uDC1F–£–¥–æ—á–∫–∞");
		int limitSpace;
		Item backpack = itemDAO.getByName("\uD83C\uDF92 –†—é–∫–∑–∞–∫");

		if(player.getInventory().getItems().contains(backpack)){
			limitSpace = 25;
		}else{
			limitSpace = 20;
		}


		if (player.getLevel() >= 5) {
			if (player.getInventory().getItems().contains(i)) {
				if (player.getInventory().getInvSize() < limitSpace) {
					Item item = fishRoller.roll();

					if (item != null) {
						inventoryDAO.putItem(player.getId(), item.getId());
						playerDAO.update(player);
						sendMsg(player.getId(), String.format("–í—ã –ø–æ–π–º–∞–ª–∏ %s", item));
						player.addXp(1);
					} else {
						sendMsg(player.getId(), "–ù–µ –∫–ª—é–µ—Ç");
					}
				} else {
					sendMsg(player.getId(), "‚ö† –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –º–µ—Å—Ç–∞");
				}
			} else {
				sendMsg(player.getId(), String.format("–î–ª—è –ø–æ—Ö–æ–¥–∞ –Ω–∞ —Ä—ã–±–∞–ª–∫—É –≤–∞–º –Ω—É–∂–µ–Ω –ø—Ä–µ–¥–º–µ—Ç `%s` \n\uD83D\uDED2 –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –Ω–∞–π—Ç–∏", i.getTitle()));
			}
		} else {
			sendMsg(player.getId(), "\uD83D\uDC7E –î–ª—è –ø–æ—Ö–æ–¥–∞ –Ω–∞ —Ä—ã–±–∞–ª–∫—É –≤–∞–º –Ω—É–∂–µ–Ω 5 —É—Ä–æ–≤–µ–Ω—å");
		}
	}



	public void command_sellfish(Player player) {
		long id = player.getId();



		LocalTime open = LocalTime.of(10, 00);
		LocalTime close = LocalTime.of(15, 00);

		LocalTime currentTime = LocalTime.now();

		if(currentTime.isBefore(open) || currentTime.isAfter(close)){
			sendMsg(id, "\uD83E\uDD88 –†—ã–±–Ω–∞—è –ª–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 10:00 –¥–æ 15:00\n\n–°–¥–∞–≤–∞—è —Ä—ã–±—É –≤ –ª–∞–≤–∫–µ, –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " +
					"–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±–æ–ª—å—à–µ –≤—ã—Ä—É—á–∫–∏, —á–µ–º –µ—Å–ª–∏ –±—ã —Å–¥–∞–≤–∞–ª–∏ –µ–µ \uD83D\uDCDE –°–∫—É–ø—â–∏–∫—É");
		}else{
			List<String> fish_titles = new ArrayList<String>();
			fish_titles.add("–ì–æ—Ä–±—É—à–∞");
			fish_titles.add("–ë—ã—á–æ–∫");
			fish_titles.add("–ö–∞—Ä–∞—Å—å");
			int fee = 0;
			for (int i = 0; i < player.getInventory().getItems().size(); i++) {
				Item fish = player.getInventory().getItem(i);
				if (fish_titles.contains(fish.getTitle())) {
					fee += fish.getCost() * 7;
					inventoryDAO.delete(player, fish.getId(), 1);
				}
			}
			if (fee > 0) {
				sendMsg(id, String.format("\uD83E\uDD88 –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤—ã–ª–æ–∂–∏–ª –∑–∞ –≤—Å—é —Ä—ã–±—É $%d", fee));
				player.balance += fee;
				playerDAO.update(player);

			} else {
				sendMsg(id, "\uD83E\uDD88–£ –≤–∞—Å –Ω–µ—Ç —Ä—ã–±—ã\n–ß—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å —Ä—ã–±—É, –≤–≤–µ–¥–∏—Ç–µ /fish");
			}
		}


	}


	public void command_drop(Player player) {

		long id = player.getId();
		int fee = 0;

		for (int i = 0; i < player.getInventory().getItems().size(); i++) {
			Item cheapItem = player.getInventory().getItem(i);
			if (cheapItem.getRarity() == ItemRarity.Cheap) {
				fee += cheapItem.getCost();
				inventoryDAO.delete(player, cheapItem.getId(), 1);
			}
		}

		if (fee > 0) {
			sendMsg(id, String.format("\uD83D\uDCB3 –í—ã –ø—Ä–æ–¥–∞–ª–∏ –≤—Å–µ –¥–µ—à–µ–≤—ã–µ –≤–µ—â–∏ –∑–∞ $%d", fee));
			player.balance += fee;
			playerDAO.update(player);
		} else {
			sendMsg(id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–µ—à–µ–≤—ã—Ö –≤–µ—â–µ–π");
		}

	}

	//SUPER SECRET BONUS
	public void command_bonus(Player player) {
		long id = player.getId();
		if (player.getStats().bonus == 0) {
			sendMsg(id, "\uD83C\uDF3A –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å | + $15000");
			player.balance += 15000;
			player.stats.bonus++;
			playerDAO.update(player);
			statsDAO.update(player.getStats(), player.getId());
		} else {
			sendMsg(id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –±–æ–Ω—É—Å");
		}
	}

	public void command_inv(Player player) {
		int limitSpace;
		Item backpack = itemDAO.getByName("\uD83C\uDF92 –†—é–∫–∑–∞–∫");
		if(player.getInventory().getItems().contains(backpack)){
			limitSpace = 25;
		}else{
			limitSpace = 20;
		}


		long player_id = player.getId();
		Inventory inventory = player.getInventory();
		if (inventory.getInvSize() != 0) {
			StringBuilder sb = new StringBuilder("\uD83C\uDF81\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: ");
			sb.append("\n");
			sb.append("========================\n");
			for (int i = 0; i < inventory.getInvSize(); i++) {
				sb.append(String.format("–ü—Ä–µ–¥–º–µ—Ç #[%d] : %s\n", i, inventory.getItem(i).toString()));
			}
			sb.append("========================\n");
			//sendMsg(message, "\u26BD");
			sb.append("\uD83C\uDF81\t –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ").append(inventory.getInvSize() + "/" + limitSpace);
			sendMsg(player_id, sb.toString());
		} else {
			sendMsg(player_id, "\uD83C\uDF81\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç ");
		}
	}

	public void command_find(Player player) {
		int limitSpace;
		Item backpack = itemDAO.getByName("\uD83C\uDF92 –†—é–∫–∑–∞–∫");
		if(player.getInventory().getItems().contains(backpack)){
			limitSpace = 25;
		}else{
			limitSpace = 20;
		}


		long player_id = player.getId();
		long now_ts = System.currentTimeMillis();
		long cooldownMs = findCooldown;
		if (player.getInventory().getInvSize() < limitSpace) {
			if (player.findExpiration != null && player.findExpiration > now_ts) {
				sendMsg(player_id, String.format("\u231B –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: %s",
						PrettyDate.prettify(player.findExpiration - now_ts, TimeUnit.MILLISECONDS)));
			} else {
				Item new_item = findRoller.roll();
				inventoryDAO.putItem(player_id, new_item.getId());
				sendMsg(player_id, String.format("\uD83C\uDF81\t –í—ã –Ω–∞—à–ª–∏: %s", new_item));
				player.addXp(2);
				player.findExpiration = now_ts + cooldownMs;

				playerDAO.update(player);
				abilityDAO.updateFind(player_id, now_ts + cooldownMs);
			}
		} else {
			sendMsg(player_id, "‚ö† –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –º–µ—Å—Ç–∞");
		}
	}


	public void command_mud(Player player) {
		int limitSpace;
		Item backpack = itemDAO.getByName("\uD83C\uDF92 –†—é–∫–∑–∞–∫");
		if(player.getInventory().getItems().contains(backpack)){
			limitSpace = 25;
		}else{
			limitSpace = 20;
		}


		long id = player.getId();
		if (player.getInventory().getInvSize() < limitSpace) {
			Item item = mudRoller.roll();
			if (item != null) {
				inventoryDAO.putItem(id, item.getId());
				sendMsg(id, String.format("–í—ã –Ω–∞—à–ª–∏ –≤ –≥—Ä—è–∑–∏ %s", item));
				player.addXp(1);
				playerDAO.update(player);
			} else {
				sendMsg(id, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏");
			}
		} else {
			sendMsg(id, "‚ö† –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –º–µ—Å—Ç–∞");
		}
	}


	public void command_pockets(Player player) {
		long player_id = player.getId();
		long now_ts = System.currentTimeMillis();
		long cooldownMs = pocketsCooldown;
		if (player.pocketsExpiration != null && player.pocketsExpiration > now_ts) {
			sendMsg(player_id, String.format("\u231B –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: %s",
					PrettyDate.prettify(player.pocketsExpiration - now_ts, TimeUnit.MILLISECONDS)));
		} else {
			int money = moneyRoller.roll();
			if (money > 0) {
				sendMsg(player_id, String.format("–í—ã –ø–æ—à–∞—Ä–∏–ª–∏ –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö –∏ –Ω–∞—à–ª–∏ $%d", money));
				player.balance += money;
				//playerDAO.update(player);
			} else if (money == 0) {
				sendMsg(player.getId(), "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–≤–æ–∏—Ö –∫–∞—Ä–º–∞–Ω–∞—Ö");
			} else {
				throw new RuntimeException("WTF?");
			}
			player.pocketsExpiration = now_ts + cooldownMs;
			abilityDAO.updatePockets(player_id, now_ts + cooldownMs);
			playerDAO.update(player);
		}
	}


	public void command_balance(Player player) {
		sendMsg(player.getId(), String.format("\uD83D\uDCB2 –í–∞—à –±–∞–ª–∞–Ω—Å: $%d", player.balance));
	}


	public void command_stats(Player player) {
		sendMsg(player.getId(), "\uD83D\uDCBB –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: " + playerDAO.size());
	}

	public void command_top(Player player) {
		StringBuilder players_list = new StringBuilder("\uD83D\uDCBB –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n");
		players_list.append("========================");
		players_list.append("\n");
		for (Player pl : playerDAO.getTopN("balance", false, 10)) {
			players_list.append(String.format("–ò–≥—Ä–æ–∫ %s | $%d | %d LVL", "`" + pl.getUsername() + "`", pl.balance, pl.getLevel()));
			players_list.append("\n");
			players_list.append("========================");
			players_list.append("\n");

		}
		sendMsg(player.getId(), players_list.toString());
	}

	public void command_info(Player player) {
		long id = player.getId();

		StringBuilder sb = new StringBuilder("*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ*\n\n");
		sb.append("\uD83C\uDF38 Needle - –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–ª–µ–≥—Ä–∞–º –∏–≥—Ä–∞, –≥–¥–µ –º–æ–∂–Ω–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ \n\n");
		sb.append("*–ü—Ä–µ–¥–º–µ—Ç—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ 4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n\n");
		sb.append("`Cheap` - –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–µ–∑–¥–µ, –Ω–µ –Ω–µ—Å—É—Ç –ø–æ—á—Ç–∏ –Ω–∏–∫–∞–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –∏—Ö –º–æ–∂–Ω–æ —Å–º–µ–ª–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å \uD83D\uDCDE –°–∫—É–ø—â–∏–∫—É\n\n");
		sb.append("`Common` - –±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã–µ, —á–µ–º Cheap. –ú–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–¥–∞–Ω—ã –¥–æ—Ä–æ–∂–µ, –µ—Å–ª–∏ –∏—Ö —Å–¥–∞–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –†—ã–±–∞. –ï–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –≤ 10 —Ä–∞–∑ –¥–æ—Ä–æ–∂–µ");
		sb.append(" –µ—Å–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —è—Ä–º–∞—Ä–∫–∏ –∏ —Å–¥–∞—Ç—å –µ–µ —Ç–∞–º\n\n");
		sb.append("`Rare` - —Ä–µ–¥–∫–∏–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∏ \uD83D\uDC8E –ü–æ–∏—Å–∫–µ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –≤ –ì—Ä—è–∑–∏ –∏ –Ω–∞ –†—ã–±–∞–ª–∫–µ, –Ω–æ —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º —à–∞–Ω—Å–æ–º, ");
		sb.append("—Å—Ä–µ–¥–∏ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–Ω–æ–≥–æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –∫–∞–∫–∏—Ö-—Ç–æ –ª–æ–∫–∞—Ü–∏–π –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è, –∫–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä `\uD83D\uDCDD –¢–µ–≥`, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ");
		sb.append("–¥–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞ \n\n");
		sb.append("`Gift` - —Å–∞–º–∞—è —Ü–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ, —Å—Ä–µ–¥–∏ –Ω–∏—Ö –ª–∏–±–æ –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –ª–∏–±–æ –≤–∞–∂–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä `\uD83D\uDC1F –£–¥–æ—á–∫–∞` ");
		sb.append("—Ç–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ª–∏–±–æ –¥–∞—é—Ç –±–æ–Ω—É—Å—ã, –ª–∏–±–æ –Ω—É–∂–Ω—ã –¥–ª—è –∫–∞–∫–∏—Ö-—Ç–æ —Ñ—É–Ω–∫—Ü–∏–π\n\n");
		sb.append("–ü—Ä–µ–¥–º–µ—Ç—ã, –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–∫–æ–º –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ª–∏–±–æ –Ω—É–∂–Ω—ã –¥–ª—è –∏–≥—Ä—ã, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —è–≤–ª—è—é—Ç—Å—è —Ä–µ–¥–∫–∏–º —ç–∫–∑–µ–º–ø—è–ª—Ä–æ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞\n\n");
		sb.append("*‚òïÔ∏è–ö–æ—Ñ–µ –∏ —á–∞–π*\n");
		sb.append("–ö–æ—Ñ–µ –∏ —á–∞–π –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π. –ó–∞–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ñ–µ –∏–ª–∏ —á–∞–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ - –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ 48 —Å–∏–º–≤–æ–ª–æ–≤\n");
		sb.append("—É—Å–ª—É–≥–∞ —Å—Ç–æ–∏—Ç $500, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä `\uD83C\uDF75 –ö—Ä—É–∂–∫–∞ '–ï–≥–∏–ø–µ—Ç'` –º–æ–≥—É—Ç –æ–ø—É—Å–∫–∞—Ç—å —Ü–µ–Ω—É –¥–æ $100 –∑–∞ —Ä–∞–∑\n\n");
		sb.append("*\uD83D\uDED2 –ú–∞–≥–∞–∑–∏–Ω*\n");
		sb.append("–ú–∞–≥–∞–∑–∏–Ω - —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞ –Ω–∏—Ö —Å–≤–æ—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∞ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –∏—Ö.\n");
		sb.append("–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n");
		sb.append("*\uD83C\uDFB0 –ú–æ–Ω–µ—Ç–∫–∞*\n");
		sb.append("–í –º–æ–Ω–µ—Ç–∫–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É, –ø–æ—Å—Ç–∞–≤–∏–≤ —Å—Ç–∞–≤–∫—É –∏ –æ–Ω–∞ –ª–∏–±–æ —É–¥–≤–æ–∏—Ç—Å—è, –ª–∏–±–æ...\n\n");
		sb.append("*\uD83D\uDD26 –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —É—Ä–æ–≤–Ω–∏*\n");
		sb.append("–ó–∞ –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –æ–ø—ã—Ç –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å. –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞–º –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∏–≥—Ä–µ. ");
		sb.append("\uD83D\uDC8E –ü–æ–∏—Å–∫ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–º–µ–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –≤ 20 –º–∏–Ω—É—Ç, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ \uD83D\uDD26 –†—ã—Ç—å—Å—è –≤ –≥—Ä—è–∑–∏ –º–æ–∂–Ω–æ –µ–∂–µ—Å–µ–∫—É–Ω–¥–Ω–æ \n\n");
		sb.append("*\uD83C\uDF80 –¢–æ–ø 10*\n");
		sb.append("–¢–æ–ø-10 - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã—Ö –∏ –≤–µ—Ä–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏ —É—Å–∏–ª–∏—è, —á—Ç–æ–±—ã –æ–∫–∞–∑–∞—Ç—å—Å—è —Å—Ä–µ–¥–∏ —Å–∞–º—ã—Ö –ª—É—á—à–∏—Ö\n\n");
		sb.append("*\uD83C\uDF3A –ü–æ–º–æ—â—å*\n");
		sb.append("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ /help —Ç–∞–∫–∂–µ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏–∂–Ω–µ–π –∫–Ω–æ–ø–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª—å—é ");
		sb.append("–¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∏ —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n");
		sb.append("‚ö° –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª Needle, –≥–¥–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞–≤–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –ø–µ—Ä–≤—ã–º–∏: https://t.me/needlechat\n\n");
		sb.append("–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!\n");

		sendMsg(id, sb.toString());


	}

	public void command_sell(Player player) {
		Inventory inventory = player.getInventory();

		StringBuilder stringBuilder = new StringBuilder();
		if (inventory.getInvSize() > 0) {
			active_players.put(player.getId(), player);
			stringBuilder.append("\uD83E\uDDF6 –ü—Ä–µ–¥–º–µ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫ –ø—Ä–æ–¥–∞–∂–µ:\n");
			stringBuilder.append("\n");
			stringBuilder.append("============================\n");
			for (int i = 0; i < inventory.getInvSize(); i++) {
				stringBuilder.append(String.format("–ü—Ä–µ–¥–º–µ—Ç #[%d] : %s\n", i, inventory.getItem(i).toString()));
			}

			stringBuilder.append("============================\n");
			stringBuilder.append("\n");
			stringBuilder.append("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:\n");
			player.setState(Player.State.awaitingSellArguments);
		} else {
			stringBuilder.append("‚ö†\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—â–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ");
		}

		sendMsg(player.getId(), stringBuilder.toString());
	}

	public void command_changeNickname(Player player) {
		long id = player.getId();
		Item i = itemDAO.getByName("\uD83D\uDCDD –¢–µ–≥");
		if (player.getInventory().getItems().contains(i)) {
			active_players.put(player.getId(), player);

			sendMsg(player.getId(), "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å: ");

			player.setState(Player.State.awaitingChangeNickname);
		} else {
			sendMsg(id, String.format("–î–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞ –Ω—É–∂–µ–Ω –ø—Ä–µ–¥–º–µ—Ç `%s`\n\uD83D\uDED2 –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –Ω–∞–π—Ç–∏", i.getTitle()));
		}
	}

	public void command_coin(Player player) {
		long player_id = player.getId();
		if (player.getLevel() >= 4) {
			if (player.balance > 0) {
				active_players.put(player_id, player);
				sendMsg(player_id, "\uD83D\uDCB0 –í–∞—à –±–∞–ª–∞–Ω—Å: $" + player.getMoney());
				sendMsg(player_id, "\uD83C\uDFB0 –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É: ");
				player.setState(Player.State.coinDash);
			} else {
				sendMsg(player_id, "\uD83C\uDFB0 –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥	");
			}
		} else {
			sendMsg(player_id, "\uD83D\uDC7E –î–ª—è –∏–≥—Ä—ã –≤ –º–æ–Ω–µ—Ç–∫—É –Ω—É–∂–µ–Ω 4 —É—Ä–æ–≤–µ–Ω—å \n‚ö° –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–æ–∂–Ω–æ –∑–∞ –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤");
		}
	}

	public void command_me(Player player) {
		long player_id = player.getId();
		String me = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ\n" + "\n" +
				"‚≠ê –í–∞—à –Ω–∏–∫: " + player.getUsername() +
				"\n" +
				"\n" +
				"\uD83D\uDCB0 –í–∞—à –±–∞–ª–∞–Ω—Å: $" + player.getMoney() +
				"\n" +
				"\n" +
				"\uD83C\uDF20 –í–∞—à GameID: " + player_id +
				"\n" +
				"\n" +
				String.format("\uD83D\uDC7E –í–∞—à —É—Ä–æ–≤–µ–Ω—å: %d (%d XP)", player.getLevel(), player.getXp()) +
				"\n" +

				"\uD83C\uDF3F –í—ã–ø–∏—Ç–æ –∫—Ä—É–∂–µ–∫ —á–∞—è: " + player.stats.tea +
				"\n" +
				"‚òïÔ∏è –í—ã–ø–∏—Ç–æ –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ: " + player.stats.coffee +
				"\n" +
				"\uD83C\uDFC6 –ü–æ–±–µ–¥—ã –≤ –º–æ–Ω–µ—Ç–∫–µ: " + player.stats.coinWins +
				"\n" +

				"\uD83D\uDCC9 –ü—Ä–æ–∏–≥—Ä—ã—à–∏ –≤ –º–æ–Ω–µ—Ç–∫–µ: " + player.stats.coinLosses +
				"\n";

		sendMsg(player_id, me);
	}

	public void command_shopbuy(Player player) {
		long player_id = player.getId();
		int limitSpace;
		Item backpack = itemDAO.getByName("\uD83C\uDF92 –†—é–∫–∑–∞–∫");
		if(player.getInventory().getItems().contains(backpack)){
			limitSpace = 25;
		}else{
			limitSpace = 20;
		}

		if (player.getInventory().getInvSize() < limitSpace) {


			if (shopDAO.getAll().isEmpty()) {

				sendMsg(player_id, "\uD83D\uDC40 –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤\n");
			} else {
				active_players.put(player_id, player);
				StringBuilder sb = new StringBuilder("\uD83D\uDC5C –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:\n\n");
				//sb.append("=====================\n");
				for (ShopItem i : shopDAO.getAll()) {
					//—Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –Ω–µ –ø–æ –Ω–∏–∫—É, –∞ –ø–æ playerID
					sb.append(String.format("\uD83C\uDFA9 –¢–æ–≤–∞—Ä |# %d| `%s` | –¶–µ–Ω–∞: %d$ | –ü—Ä–æ–¥–∞–≤–µ—Ü: `%s` \n", i.getId(), i.getItem().getTitle(), i.getCost(), i.getSeller().getUsername()));
				}
				sb.append("\n");

				sendMsg(player_id, sb.toString());
				sendMsg(player_id, "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: ");
				player.setState(Player.State.shopBuy);
				//playerDAO.update(player);
			}
		} else {
			sendMsg(player.getId(), "‚ö† –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –º–µ—Å—Ç–∞");
		}
	}

	public void command_shopshow(Player player) {
		try {
			SendPhoto photo = new SendPhoto();
			photo.setPhoto(new InputFile(new File(".\\pics\\shop.jpg")));
			photo.setChatId(player.getId());

			long player_id = player.getId();

			if (shopDAO.getAll().isEmpty()) {
				sendMsg(player_id, "\uD83D\uDC40 –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤\n");
			} else {
				StringBuilder sb = new StringBuilder("\uD83D\uDC5C –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:\n\n");
				//sb.append("=====================\n");
				for (ShopItem i : shopDAO.getAll()) {
					//—Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –Ω–µ –ø–æ –Ω–∏–∫—É, –∞ –ø–æ playerID
					sb.append(i);
				}
				sb.append("\n");
				sb.append("\uD83D\uDCB3 –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /shopbuy \n");
				sb.append("\uD83D\uDED2 –ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä, –≤–≤–µ–¥–∏—Ç–µ /shopplace \n");
				//sb.append("=====================\n");

				//photo.setCaption(sb.toString());
				this.execute(photo);
				sendMsg(player_id, sb.toString());
			}
		} catch (TelegramApiException e) {
			e.printStackTrace();
		}

	}

	public void command_shopplace(Player player) {
		long player_id = player.getId();

		if (player.getInventory().getInvSize() == 0) {
			sendMsg(player_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∏—á–µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç");
		} else {
			active_players.put(player_id, player);
			Inventory inventory = player.getInventory();

			StringBuilder sb = new StringBuilder("–ü—Ä–µ–¥–º–µ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ \n");
			sb.append("=====================\n");
			for (int i = 0; i < inventory.getInvSize(); i++) {

				sb.append(String.format("–ü—Ä–µ–¥–º–µ—Ç | %d |: ", i)).append(inventory.getItem(i)).append("\n");
			}
			sb.append("=====================\n");
			sendMsg(player_id, sb.toString());
			sendMsg(player_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å\n");

			player.setState(Player.State.shopPlaceGood_awaitingID);
			//playerDAO.update(player);
		}
	}


	public void command_pay(Player player) {
		if (player.getMoney() <= 0) {
			sendMsg(player.getId(), "–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞");
		} else {
			active_players.put(player.getId(), player);
			sendMsg(player.getId(), "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: ");
			player.setState(Player.State.payAwaitingNickname);
		}
	}

	public void command_coffee(Player player) {
		if (player.getMoney() < 500) {
			sendMsg(player.getId(), "‚òï –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω—è–∫ –Ω–∞ –∫–æ—Ñ–µ :'(");
		} else {
			active_players.put(player.getId(), player);
			sendMsg(player.getId(), "‚òï($500) –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: ");
			player.setState(Player.State.awaitingCoffee);
		}
	}

	public void command_tea(Player player) {
		if (player.getMoney() < 500) {
			sendMsg(player.getId(), "\uD83C\uDF3F –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω—è–∫ –Ω–∞ —á–∞–π :'(");
		} else {
			active_players.put(player.getId(), player);
			sendMsg(player.getId(), "\uD83C\uDF3F($500) –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: ");
			player.setState(Player.State.awaitingTea);
		}
	}

	public void command_start_already_registered(Player player) {
		sendMsg(player.getId(), "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n");
	}

	public void cleanShopFromExpired() {
		List<ShopItem> shopItems = shopDAO.expire();
		for (ShopItem shopItem : shopItems) {
			Player seller = shopItem.getSeller();
			long seller_id = seller.getId();
			inventoryDAO.putItem(seller_id, shopItem.getItem().getId());
			sendMsg(seller_id, String.format("–í–∞—à —Ç–æ–≤–∞—Ä %s–±—ã–ª —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", shopItem));
		}
	}

	void sendFindCooldownNotification() {
		List<Long> expires = abilityDAO.expireFind();
		for (long id : expires) {
			sendMsg(id, "‚≠ê –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã!");
		}
	}

	public void dump_database() {
		System.out.println("Dump database fired (NO-OP)");
	}

	public void on_closing() {
		System.out.println("Exiting...");
		sf_dump.cancel(false);
		sf_find.cancel(false);
		sf_timers.cancel(false);
		STPE.stpe.shutdown();
		dump_database();
		System.out.println("Goodbye!");
	}

	public void level_up_notification(Player player) {
		int fee = 350 * player.getLevel();
		sendMsg(player.getId(), String.format("\uD83C\uDF88 –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–£—Ä–æ–≤–µ–Ω—å %d)\n\uD83C\uDF81 –ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å +$%d",
				player.getLevel(), fee));
		player.balance += fee;
		playerDAO.update(player);
	}

	public String getBotUsername() {
		return "Needle";
	}

	private String init_token() throws FileNotFoundException {
		Scanner scanner = new Scanner(new File("token"));
		return scanner.nextLine();
	}

	public String getBotToken() {
		return token;
	}

	private void coin_dash_callback(Player player, int i_dash) {
		long player_id = player.getId();
		CoinGame coinGame = new CoinGame(i_dash);
		if (coinGame.roll()) {
			sendMsg(player_id, "\uD83D\uDCB0 –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ " + "$" + i_dash);
			coinGame.coinWin(player, i_dash);
			player.stats.coinWins++;


		} else {
			sendMsg(player_id, "‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ " + "$" + i_dash);
			coinGame.coinLose(player, i_dash);

			player.stats.coinLosses++;

		}

		player.setState(Player.State.awaitingCommands);
		sendMsg(player_id, "–í–∞—à –±–∞–ª–∞–Ω—Å: " + player.balance + " \uD83D\uDCB2");

		statsDAO.update(player.getStats(), player.getId());
		playerDAO.update(player);


	}
}



