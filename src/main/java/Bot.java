import ability.Ability;
import ability.Cooldown;
import database.InventoryDAO;
import database.PlayerDAO;
import database.SQLExecutor;
import database.SQLSession;
import main.Inventory;
import main.Item;
import main.Player;
import main.PrettyDate;
import org.telegram.telegrambots.ApiContextInitializer;
import org.telegram.telegrambots.TelegramBotsApi;
import org.telegram.telegrambots.api.methods.send.SendMessage;
import org.telegram.telegrambots.api.objects.Message;
import org.telegram.telegrambots.api.objects.Update;
import org.telegram.telegrambots.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.exceptions.TelegramApiException;
import org.telegram.telegrambots.exceptions.TelegramApiRequestException;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;


public class Bot extends TelegramLongPollingBot
{
	//private static Map<Long, Player> players = new HashMap<>(); //–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä–æ–∫–æ–≤

	//private static Connection connection;
	static PlayerDAO playerDAO = new PlayerDAO(SQLSession.sqlConnection);
	static InventoryDAO inventoryDAO = new InventoryDAO(SQLSession.sqlConnection);

	//üê≥

	public static void main(String[] args) throws IOException, SQLException
	{
		//readFile();
		initDB();

		//players = new HashMap<>();
		//for (Player player : playerDAO.getAll())
		//{
		//	players.put(player.getId(), player);
		//}

		ApiContextInitializer.init(); //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
		TelegramBotsApi telegramBotsApi = new TelegramBotsApi(); //—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ API
		try
		{
			telegramBotsApi.registerBot(new Bot());
		}
		catch (TelegramApiRequestException e)
		{
			e.printStackTrace();
		}
	}

	private static void initDB() throws IOException, SQLException
	{
		SQLExecutor executor = new SQLExecutor(new File("src\\main\\java\\database\\init.sql"), SQLSession.sqlConnection);
		executor.execute();
		/*
		Statement statement = connection.createStatement();
		statement.execute("create table if not exists players\n" +
				"(\n" +
				"    id integer primary key,\n" +
				"    name text,\n" +
				"    state text not null,\n" +
				"    lastfia text default \"NEVER\"\n" +
				");");
		statement.execute("create table if not exists items\n" +
				"(\n" +
				"    id integer primary key,\n" +
				"    name text not null,\n" +
				"    rarity text not null,\n" +
				"    cost integer\n" +
				");");
		statement.execute("create table if not exists inventory\n" +
				"(\n" +
				"    id integer primary key,\n" +
				"    player_id,\n" +
				"    item_id,\n" +
				"\n" +
				"    foreign key (player_id) references players (id) on delete cascade,\n" +
				"    foreign key (item_id) references items (id) on update cascade on delete cascade\n" +
				");");
		statement.execute("insert or ignore into items values\n" +
				"(1, \"–õ–æ–ø–∞—Ç–∞\", \"Common\", 200),\n" +
				"(2, \"–ü–æ–∏—Å–∫–æ–≤—ã–π —Ñ–æ–Ω–∞—Ä—å\", \"Rare\", 7000),\n" +
				"(3, \"–ü–æ–¥–≤–µ—Å–∫–∞ 'Nosebleed'\", \"Rare\", 30000),\n" +
				"(4, \"–°—Ç—Ä—É–Ω—ã\", \"Common\", 500),\n" +
				"(5, \"–§—É—Ç–±–æ–ª–∫–∞ 'Drain'\", \"Common\", 500),\n" +
				"(6, \"–ë–∞–Ω–∞–Ω\", \"Common\", 100),\n" +
				"(7, \"–ß–∞—à–∫–∞ '–ï–≥–∏–ø–µ—Ç'\", \"Rare\", 1000),\n" +
				"(8, \"–ù–æ—Å–∫–∏\", \"Common\", 100),\n" +
				"(9, \"–†—É—á–∫–∞\", \"Common\", 100),\n" +
				"(10, \"–ë–∞–ª–ª–æ–Ω—á–∏–∫ —Å –∫—Ä–∞—Å–∫–æ–π\", \"Common\", 750),\n" +
				"(11, \"–ü–ª–∞—Ç–æ–∫\", \"Common\", 150),\n" +
				"(12, \"–ü–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç\", \"Common\", 50),\n" +
				"(13, \"–°–∏–Ω–∏–π –±—Ä–∞—Å–ª–µ—Ç\", \"Common\", 300),\n" +
				"(14, \"–ö—Ä–∞—Å–Ω—ã–π –±—Ä–∞—Å–ª–µ—Ç\", \"Common\", 300),\n" +
				"(15, \"–ñ–µ–ª—Ç—ã–π –±—Ä–∞—Å–ª–µ—Ç\", \"Common\", 300),\n" +
				"(16, \"–ó–µ–ª–µ–Ω—ã–π –±—Ä–∞—Å–ª–µ—Ç\", \"Common\", 300),\n" +
				"(17, \"–ë—Ä–∞—Å–ª–µ—Ç '–û—Ä–∏–æ–Ω'\", \"Common\", 1000),\n" +
				"(18, \"–ë—Ä–∞—Å–ª–µ—Ç '–°–∏—Ä–∏—É—Å'\", \"Common\", 900),\n" +
				"(19, \"–ó—É–±–Ω–∞—è —â–µ—Ç–∫–∞\", \"Common\", 50),\n" +
				"(20, \"–®–æ–∫–æ–ª–∞–¥–∫–∞\", \"Common\", 200),\n" +
				"(21, \"–†—é–∫–∑–∞–∫\", \"Rare\", 700),\n" +
				"(22, \"–°–∏–Ω–∏–π —Ñ–æ–Ω–∞—Ä–∏–∫\", \"Gift\", 25000);");*/
	}


	//—á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
	public void sendMsg(Message message, String text)
	{
		SendMessage sendMessage = new SendMessage();
		sendMessage.enableMarkdown(true);

		//—á–∞—Ç –∞–π–¥–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –∫–æ–º—É –æ—Ç–≤–µ—á–∞—Ç—å
		sendMessage.setChatId(message.getChatId().toString());

		//–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–∞ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∏—Ç—å
		//sendMessage.setReplyToMessageId(message.getMessageId());

		sendMessage.setText(text);
		try
		{
			//–¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–º–µ—Å—Ç–∏–ª–∏ –≤ –Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			setButtons(sendMessage);
			sendMessage(sendMessage);
		}
		catch (TelegramApiException e)
		{
			e.printStackTrace();
		}

	}

	public void command_help(Message message)
	{
		sendMsg(message, "\\[`Needle`] –ë–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: \n" +
				"\n" +
				"\uD83D\uDD0D /find - –∏—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã \n" +
				"\n" +
				"\uD83D\uDCC3 /inv - –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å \n" +
				"\n" +
				"\uD83C\uDF80 /top - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ \n" +
				"\n" +
				"\uD83D\uDCB9 /stats - –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ \n" +
				"\n" +
				"\uD83D\uDCB3 /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å  \n" +
				"\n" +
				"\uD83D\uDCB0 /sell - –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å–∫—É–ø—â–∏–∫—É\n" +
				"\n" +
				"\uD83D\uDCE9 /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ \n" +
				"\n" +
				"‚Ñπ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ \n" +

				"\n" +
				"\uD83D\uDC80 /changenickname - —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º \n \n" +
				"\uD83C\uDFB0 /coin - —Å—ã–≥—Ä–∞—Ç—å –≤ –ú–æ–Ω–µ—Ç–∫—É"


		);
	}

	public void command_inv(Message message)
	{
		Inventory inventory = inventoryDAO.get(message.getChatId());
		if (inventory.getInvSize() != 0)
		{

			sendMsg(message, "\uD83C\uDF81\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: ");
			//sendMsg(message, "\u26BD");
			sendMsg(message, "\n" + inventory.showInventory() + "\n");
			sendMsg(message, "\uD83C\uDF81\t –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " + inventory.getInvSize());
		}
		else
		{
			sendMsg(message, "\uD83C\uDF81\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç ");

		}
	}

	public void command_find(Message message)
	{
		long id = message.getChatId();
		Player player = playerDAO.get(id);
		Ability<Item> fia = player.getFindItemAbility();
		if (fia.isUsable())
		{
			Item new_item = fia.use();
			inventoryDAO.putItem(id, new_item.getId());
			sendMsg(message, String.format("\uD83C\uDF81\t –í—ã –Ω–∞—à–ª–∏: %s", new_item));
		}
		else
		{
			sendMsg(message, String.format("\u231B –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: %s",
					PrettyDate.prettify(fia.getCDTimer(), TimeUnit.SECONDS)));
		}
	}

	public void command_balance(Message message)
	{
		sendMsg(message, String.format("\uD83D\uDCB2 –í–∞—à –±–∞–ª–∞–Ω—Å: $%d", playerDAO.get(message.getChatId()).balance));
	}


	public void command_stats(Message message)
	{
		sendMsg(message, "\uD83D\uDCBB –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: " + playerDAO.size());
	}

	public void command_top(Message message)
	{
		StringBuilder players_list = new StringBuilder("\uD83D\uDCBB –í—Å–µ –∏–≥—Ä–æ–∫–∏:\n");
		players_list.append("========================");
		players_list.append("\n");
		for (Player player : playerDAO.getAll())
		{
			players_list.append(String.format("–ò–≥—Ä–æ–∫ %s | $%d", player.getUsername(), player.balance));
			players_list.append("\n");
			players_list.append("========================");
			players_list.append("\n");
		}
		sendMsg(message, players_list.toString());
		//for(Map.Entry<Long, main.Player> pair : players.entrySet()){
		//	sendMsg(message, "–ò–≥—Ä–æ–∫: " + pair.getValue().getUsername() + " | " + "$" + pair.getValue().getInventory().getBalance());
		//}
	}

	public void command_info(Message message)
	{
		sendMsg(message, "Needle - —ç—Ç–æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–ª–µ–≥—Ä–∞–º –∏–≥—Ä–∞, –Ω–∞—Ü–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ " +
				"–ø—Ä–µ–¥–º–µ—Ç–æ–≤. –í–∞–º –∫–∞–∫ –∏–≥—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–æ–±–∏—Ä–∞—Ç—å –∏—Ö, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∞—á–∏–≤–∫–∏ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ " +
				"–∏–≥—Ä–æ–∫–∞–º–∏. –ü—Ä–µ–¥–º–µ—Ç—ã –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å, —Ç–µ–º —Å–∞–º—ã–º —É–≤–µ–ª–∏—á–∏–≤–∞—è —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å. –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É " +
				"–≤—ã –º–æ–∂–µ—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–µ –∫–∞–∑–∏–Ω–æ, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ " +
				"—Å–æ–∫—Ä–∞—â–∞—è –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–µ–¥–º–µ—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤. –°—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ, —Ä–µ–¥–∫–∏–µ, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ " +
				"–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ. –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –∏–º–µ–µ—Ç —Ü–µ–Ω—ã, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–∞–Ω–∞ —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é " +
				"—Ü–µ–Ω—É. –ü–æ–∫—É–ø–∞—Ç—å –∏ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ. –£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã. ");
	}

	public void command_sell(Message message)
	{
		long id = message.getChatId();
		Player player = playerDAO.get(id);
		Inventory inventory = player.getInventory();

		StringBuilder stringBuilder = new StringBuilder();
		if (inventory.getInvSize() > 0)
		{
			stringBuilder.append("–ü—Ä–µ–¥–º–µ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫ –ø—Ä–æ–¥–∞–∂–µ:\n");
			for (int i = 0; i < inventory.getInvSize(); i++)
			{
				stringBuilder.append(String.format("–ü—Ä–µ–¥–º–µ—Ç #[%d] : %s\n", i, inventory.getItem(i).toString()));
			}
			stringBuilder.append("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:\n");
			player.setState(Player.State.awaitingSellArguments);
			playerDAO.update(player);
		}
		else
		{
			stringBuilder.append("‚ö†\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—â–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ");
		}

		sendMsg(message, stringBuilder.toString());
	}

	public void command_changeNickname(Message message)
	{
		Player player = playerDAO.get(message.getChatId());
		sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å: ");
		player.setState(Player.State.awaitingChangeNickname);
		playerDAO.update(player);
	}

	//–º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	public void onUpdateReceived(Update update)
	{
		Message message = update.getMessage();
		//regex –¥–ª—è –Ω–∏–∫–∞
		String usernameTemplate = "([–ê-–Ø–∞-—èA-Za-z0-9]{3,32})";

		if (message != null && message.hasText())
		{
			Long id = message.getChatId();
			String text = message.getText();

			System.out.println("–¢–µ–∫—Å—Ç–∏–∫: " + message.getText());


			switch (text)
			{
				case "/start":
					if (playerDAO.get(id) != null)
					{
						sendMsg(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
					}
					else
					{
						playerDAO.put(new Player(id, "player" + id, 0, Player.State.awaitingNickname, new Inventory()));
						sendMsg(message, "\uD83C\uDF77 –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Needle");
					}
					break;
				default:
					if (playerDAO.get(id) == null)
					{
						sendMsg(message, "‚≠ê –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
					}
					break;
			}

			Player player = playerDAO.get(id);
			//–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å containsKey

			//if(!players.containsKey(player)){
			//sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
			//	}

			switch (text)
			{
				case "/inv":
					command_inv(message);
					break;
				case "/find":
					command_find(message);
					break;
				case "/balance":
					command_balance(message);
					break;
				case "/stats":
					command_stats(message);
					break;
				case "/sell":
					command_sell(message);
					break;
				case "/top":
					//bug
					command_top(message);
					break;
				case "/help":
					command_help(message);
					break;
				case "/info":
					command_info(message);
					break;
				case "/changenickname":
					command_changeNickname(message);
					break;
				case "/cheat":
					sendMsg(message, "–ò–≥—Ä–æ–∫ " + player.getUsername() + " –æ–±–∑–∞–≤–µ–ª—Å—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–º");
					player.setUsername("\uD83D\uDC33 " + player.getUsername());
					playerDAO.update(player);
					break;
				case "/coin":

					if (player.balance > 0)
					{
						sendMsg(message, "\uD83C\uDFB0 –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É: ");
					}
					else
					{
						sendMsg(message, "\uD83C\uDFB0 –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥	");
					}


					player.setState(Player.State.coinDash);
					playerDAO.update(player);
					break;
				default:

					if (player.getId() == id)
					{
						if (player.getState() == Player.State.awaitingNickname)
						{
							String username = message.getText();

							if (username.matches(usernameTemplate))
							{
								player.setUsername(username);
								player.setState(Player.State.awaitingCommands);
								playerDAO.update(player);
								sendMsg(message, "–ò–≥—Ä–æ–∫ " + "`" + player.getUsername() + "`" + " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
								command_help(message);
							}
							else
							{
								//sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫: ");
								sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫: ");
								//player.setState(main.Player.State.awaitingNickname);
							}


						}
						else if (player.getState() == Player.State.awaitingSellArguments)
						{
							try
							{
								Inventory inventory = player.getInventory();
								String sellID = message.getText();
								int sell_id = Integer.parseInt(sellID);
								Item item = inventory.getItem(sell_id);
								player.balance += item.getCost();
								inventory.removeItem(sell_id);
								inventoryDAO.delete(id, item.getId(), 1);

								player.setState(Player.State.awaitingCommands);
								playerDAO.update(player);

								sendMsg(message, "‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω");
							}
							catch (NumberFormatException e)
							{
								e.printStackTrace();
								sendMsg(message, "‚ö†\t –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ");
								player.setState(Player.State.awaitingCommands);
								playerDAO.update(player);
							}
							catch (IndexOutOfBoundsException ee)
							{
								ee.printStackTrace();
								sendMsg(message, "‚ö†\t –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID");
								player.setState(Player.State.awaitingCommands);
								playerDAO.update(player);
							}
						}
						else if (player.getState() == Player.State.awaitingCommands)
						{
							String getText = message.getText();
							//–Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ /start –∏ —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞–ª–æ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
							//FIX HERE
							if (!getText.equals("/start"))
							{
								sendMsg(message, "‚ö†\t –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
							}
						}
						else if (player.getState() == Player.State.awaitingChangeNickname)
						{
							String nickname = message.getText();
							if (nickname.matches(usernameTemplate))
							{
								player.setUsername(nickname);
								sendMsg(message, "–í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ " + "`" + player.getUsername() + "`");
								player.setState(Player.State.awaitingCommands);
								playerDAO.update(player);
							}
							else
							{
								sendMsg(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫");
								player.setState(Player.State.awaitingChangeNickname);
								playerDAO.update(player);
							}

						}
						else if (player.getState() == Player.State.coinDash)
						{
							try
							{
								String dash = message.getText();
								int i_dash = Integer.parseInt(dash);

								if (i_dash > 0 && i_dash <= player.balance)
								{
									sendMsg(message, "\uD83C\uDFB0 –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: " + "$" + i_dash);

									sendMsg(message, "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...");

									Cooldown kd = new Cooldown(2, new CooldownForPlayer(player, message, i_dash, this));
									kd.startCooldown();


								}
								else
								{
									sendMsg(message, "‚ö†\t –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—É–º–º—ã");

								}
							}
							catch (NumberFormatException e)
							{
								sendMsg(message, "‚ö†\t–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º");
								e.printStackTrace();
								player.setState(Player.State.awaitingCommands);
								playerDAO.update(player);
							}

						}
					}
					break;
				// —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –ø–æ—Ç–æ–º –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ –Ω–æ–≤—ã–π ID

				//–ù—É –∏ —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ –ø–æ–∫–∞ —á—Ç–æ, —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å /find –∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–∞—Ç—É –Ω—É–∂–Ω–æ –∏ –≤—Ä–µ–º—è

			}

			//playerDAO.update(player);
		}
	}

	//–∫–Ω–æ–ø–∫–∏

	public void setButtons(SendMessage sendMessage)
	{
		long id = Long.parseLong(sendMessage.getChatId());
		Player player = playerDAO.get(id);
		//–∏–Ω–∏—Ü–∏–∞–ª–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
		//—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
		sendMessage.setReplyMarkup(replyKeyboardMarkup);
		//–≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤–∏–¥–µ–ª –∏–ª–∏ –Ω–µ—Ç)
		replyKeyboardMarkup.setSelective(true);
		replyKeyboardMarkup.setResizeKeyboard(true);
		//—Å–∫—Ä—ã–≤–∞—Ç—å –∏–ª–∏ –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
		replyKeyboardMarkup.setOneTimeKeyboard(true);

		List<KeyboardRow> keyboardRowList = new ArrayList<>();
		KeyboardRow keyboardFirstRow = new KeyboardRow();

		//–¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–µ—Ä–≤—ã–π —Ä—è–¥
		//KeyboardButton startButton = new KeyboardButton("/start");

		if (player == null)
		{
			keyboardFirstRow.add(new KeyboardButton("/start"));
		}
		else
		{
			keyboardFirstRow.add(new KeyboardButton("/help"));
		}

		//keyboardFirstRow.add(new KeyboardButton("/find"));
		//–¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ø–∏–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
		keyboardRowList.add(keyboardFirstRow);
		replyKeyboardMarkup.setKeyboard(keyboardRowList);

	}

	public String getBotUsername()
	{
		return "Needle";
	}

	public String getBotToken()
	{
		try
		{
			Scanner scanner = new Scanner(new File("token"));
			return scanner.nextLine();
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
			throw new RuntimeException("No token", e);
		}
		//—Ç–æ–∫–µ–Ω —Ä–µ–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç —Å–∞–º–æ–≥–æ —Ç–≥ BotFather, —Ç–∞–º –∂–µ –ø–∏—à–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–æ–∫–µ–Ω
	}

	private static class CooldownForPlayer implements Runnable
	{
		private final Player player;
		private final int i_dash;
		private final Message message;
		private final Bot botik;

		CooldownForPlayer(Player player, Message message, int i_dash, Bot botik)
		{
			this.player = player;
			this.i_dash = i_dash;
			this.message = message;
			this.botik = botik;
		}

		@Override
		public void run()
		{
			CoinGame coinGame = new CoinGame(i_dash);
			if (coinGame.roll())
			{
				botik.sendMsg(message, "\uD83D\uDCB0 –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ " + "$" + i_dash);
				player.getInventory().coinWin(i_dash);
			}
			else
			{
				botik.sendMsg(message, "‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ " + "$" + i_dash);
				player.getInventory().coinLose(i_dash);
			}
			botik.sendMsg(message, "–í–∞—à –±–∞–ª–∞–Ω—Å: " + player.balance + " \uD83D\uDCB2");
			player.setState(Player.State.awaitingCommands);
			playerDAO.update(player);
		}
	}
}



