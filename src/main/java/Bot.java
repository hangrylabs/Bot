import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import java.nio.CharBuffer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.TimeUnit;

import ability.Ability;
import org.telegram.telegrambots.ApiContextInitializer;
import org.telegram.telegrambots.TelegramBotsApi;
import org.telegram.telegrambots.api.methods.send.SendMessage;
import org.telegram.telegrambots.api.objects.Message;
import org.telegram.telegrambots.api.objects.Update;
import org.telegram.telegrambots.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.exceptions.TelegramApiException;
import org.telegram.telegrambots.exceptions.TelegramApiRequestException;


public class Bot extends TelegramLongPollingBot
{
	private static Map<Long, Player> players = new HashMap<>(); //–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
	private static File token = new File("token");
	private static Scanner scanner;
	private static String tokBot;
	private static Connection connection;
	private static PlayerDAO playerDAO;
	//üê≥

	public static void main(String[] args) throws IOException, SQLException
	{
		readFile();
		initDB();

		players = new HashMap<>();
		playerDAO = new PlayerDAO(connection);
		for (Player player : playerDAO.getAll())
		{
			players.put(player.getId(), player);
		}

		ApiContextInitializer.init(); //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
		TelegramBotsApi telegramBotsApi = new TelegramBotsApi(); //—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ API
		try
		{
			telegramBotsApi.registerBot(new Bot());
		}
		catch (TelegramApiRequestException e)
		{
			e.printStackTrace();
		}
	}

	private static void initDB() throws IOException, SQLException
	{
		connection = DriverManager.getConnection("jdbc:sqlite:data.db");
		String sql = Files.readString(Path.of("src\\main\\java\\init.sql"));
		connection.createStatement().execute(sql);
	}


	//—á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
	public void sendMsg(Message message, String text)
	{
		SendMessage sendMessage = new SendMessage();
		sendMessage.enableMarkdown(true);

		//—á–∞—Ç –∞–π–¥–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –∫–æ–º—É –æ—Ç–≤–µ—á–∞—Ç—å
		sendMessage.setChatId(message.getChatId());

		//–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–∞ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∏—Ç—å
		//sendMessage.setReplyToMessageId(message.getMessageId());

		sendMessage.setText(text);
		try
		{
			//–¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–º–µ—Å—Ç–∏–ª–∏ –≤ –Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			setButtons(sendMessage);
			sendMessage(sendMessage);
		}
		catch (TelegramApiException e)
		{
			e.printStackTrace();
		}

	}

	public void command_help(Message message)
	{
		sendMsg(message, "\\[`Needle`] –ë–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: \n" +
				"\n" +
				"\uD83D\uDD0D /find - –∏—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã \n" +
				"\n" +
				"\uD83D\uDCC3 /inv - –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å \n" +
				"\n" +
				"\uD83C\uDF80 /top - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ \n" +
				"\n" +
				"\uD83D\uDCB9 /stats - –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ \n" +
				"\n" +
				"\uD83D\uDCB3 /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å  \n" +
				"\n" +
				"\uD83D\uDCB0 /sell - –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å–∫—É–ø—â–∏–∫—É\n" +
				"\n" +
				"\uD83D\uDCE9 /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ \n" +
				"\n" +
				"‚Ñπ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ \n" +
				"\n" +
				"\uD83D\uDC80 /changenickname - —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º"
		);
	}

	public void command_inv(Message message, Inventory inv)
	{
		inv = players.get(message.getChatId()).getInventory();
		if (inv.getInvSize() != 0)
		{

			sendMsg(message, "\uD83C\uDF81\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: ");
			//sendMsg(message, "\u26BD");
			sendMsg(message, "\n" + inv.showInventory() + "\n");
			sendMsg(message, "\uD83C\uDF81\t –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " + inv.getInvSize());
		}
		else
		{
			sendMsg(message, "\uD83C\uDF81\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç ");

		}
	}

	public void command_find(Message message, Inventory inv)
	{

		long id = message.getChatId();
		Player player = players.get(id);
		Ability<Item> fia = player.getFindItemAbility();
		if (fia.isUsable())
		{
			Item new_item = fia.use();
			sendMsg(message, String.format("\uD83C\uDF81\t –í—ã –Ω–∞—à–ª–∏: %s", new_item));
		}
		else
		{
			sendMsg(message, String.format("\u231B –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: %s",
					PrettyDate.prettify(fia.getCDTimer(), TimeUnit.SECONDS)));
		}
	}

	public void command_balance(Message message, Inventory inv)
	{
		inv = players.get(message.getChatId()).getInventory();
		sendMsg(message, "\uD83D\uDCB2 –í–∞—à –±–∞–ª–∞–Ω—Å: " + "$" + inv.getBalance());
	}


	public void command_stats(Message message)
	{
		sendMsg(message, "\uD83D\uDCBB –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: " + players.size());
	}

	public void command_top(Message message)
	{
		StringBuilder players_list = new StringBuilder("\uD83D\uDCBB –í—Å–µ –∏–≥—Ä–æ–∫–∏:\n");
		for (Player player : players.values())
		{
			players_list.append(String.format("–ò–≥—Ä–æ–∫ %s | $%d", player.getUsername(), player.getMoney()));
			players_list.append("\n");
		}
		sendMsg(message, players_list.toString());
		//for(Map.Entry<Long, Player> pair : players.entrySet()){
		//	sendMsg(message, "–ò–≥—Ä–æ–∫: " + pair.getValue().getUsername() + " | " + "$" + pair.getValue().getInventory().getBalance());
		//}
	}

	public void command_info(Message message)
	{
		sendMsg(message, "Needle - —ç—Ç–æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–ª–µ–≥—Ä–∞–º –∏–≥—Ä–∞, –Ω–∞—Ü–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ " +
				"–ø—Ä–µ–¥–º–µ—Ç–æ–≤. –í–∞–º –∫–∞–∫ –∏–≥—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–æ–±–∏—Ä–∞—Ç—å –∏—Ö, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∞—á–∏–≤–∫–∏ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ " +
				"–∏–≥—Ä–æ–∫–∞–º–∏. –ü—Ä–µ–¥–º–µ—Ç—ã –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å, —Ç–µ–º —Å–∞–º—ã–º —É–≤–µ–ª–∏—á–∏–≤–∞—è —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å. –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É " +
				"–≤—ã –º–æ–∂–µ—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–µ –∫–∞–∑–∏–Ω–æ, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ " +
				"—Å–æ–∫—Ä–∞—â–∞—è –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–µ–¥–º–µ—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤. –°—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ, —Ä–µ–¥–∫–∏–µ, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ " +
				"–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ. –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –∏–º–µ–µ—Ç —Ü–µ–Ω—ã, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–∞–Ω–∞ —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é " +
				"—Ü–µ–Ω—É. –ü–æ–∫—É–ø–∞—Ç—å –∏ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ. –£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã. ");
	}

	public void command_sell(Message message, Inventory inv)
	{
		inv = players.get(message.getChatId()).getInventory();
		Player player = players.get(message.getChatId());

		if (inv.getInvSize() > 0)
		{
			sendMsg(message, " –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å: ");
			int itemSellIndex = 0;
			sendMsg(message, "–ü—Ä–µ–¥–º–µ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ");

			for (int j = 0; j < inv.getInvSize(); j++)
			{
				sendMsg(message, "–ü—Ä–µ–¥–º–µ—Ç " + "|" + itemSellIndex + "|: " + inv.getItem(j));
				itemSellIndex++;
			}
			player.setState(Player.State.awaitingSellArguments);
		}
		else
		{
			sendMsg(message, "‚ö†\t –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—â–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ");
		}

	}

	public void command_changeNickname(Message message)
	{
		Player player = players.get(message.getChatId());
		sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å: ");
		player.setState(Player.State.awaitingChangeNickname);
	}

	//–º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	public void onUpdateReceived(Update update)
	{

		Message message = update.getMessage();
		//regex –¥–ª—è –Ω–∏–∫–∞
		String usernameTemplate = "([–ê-–Ø–∞-—èA-Za-z0-9]{3,32})";

		if (message != null && message.hasText())
		{

			System.out.println("–¢–µ–∫—Å—Ç–∏–∫: " + message.getText());

			Inventory inv = null;
			Player player = null;

			switch (message.getText())
			{
				case "/start":
					if (players.containsKey(message.getChatId()))
					{
						sendMsg(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
					}
					else
					{
						players.put(message.getChatId(), new Player(message.getChatId(), "player" + message.getChatId()));
						player = players.get(message.getChatId());
						playerDAO.put(player);
						sendMsg(message, "\uD83C\uDF77 –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Needle");
						player.setState(Player.State.awaitingNickname);
					}
					break;
				default:
					if (!players.containsKey(message.getChatId()))
					{
						sendMsg(message, "‚≠ê –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
					}
					break;
			}

			player = players.get(message.getChatId());
			//–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å containsKey

			//if(!players.containsKey(player)){
			//sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
			//	}


			switch (message.getText())
			{
				case "/inv":
					command_inv(message, inv);
					break;
				case "/find":
					command_find(message, inv);
					break;
				case "/balance":
					command_balance(message, inv);
					break;
				case "/stats":
					command_stats(message);
					break;
				case "/sell":
					command_sell(message, inv);
					break;
				case "/top":
					//bug
					command_top(message);
					break;
				case "/help":
					command_help(message);
					break;
				case "/info":
					command_info(message);
					break;
				case "/changenickname":
					command_changeNickname(message);
					break;
				case "/casino":
					sendMsg(message, "1. –ß–µ—Ä–Ω–æ–µ \n" +
							"2. –ö—Ä–∞—Å–Ω–æ–µ \n");
					sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É: ");
					player.setState(Player.State.casinoDash);
					break;
				default:

					if (player.getId() == message.getChatId())
					{
						if (player.getState() == Player.State.awaitingNickname)
						{
							String username = message.getText();

							if (username.matches(usernameTemplate))
							{
								player.setUsername(username);
								player.setState(Player.State.awaitingCommands);
								playerDAO.update(player.getId(), player);
								sendMsg(message, "–ò–≥—Ä–æ–∫ " + "`" + player.getUsername() + "`" + " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
								command_help(message);
							}
							else
							{
								//sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫: ");
								sendMsg(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫: ");
								//player.setState(Player.State.awaitingNickname);
							}


						}
						else if (player.getState() == Player.State.awaitingSellArguments)
						{

							try
							{
								inv = players.get(message.getChatId()).getInventory();
								String sellID = message.getText();
								Integer.parseInt(sellID);

								inv.sellItem(Integer.parseInt(sellID));
								sendMsg(message, "‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω");
								player.setState(Player.State.awaitingCommands);
							}
							catch (NumberFormatException e)
							{
								e.printStackTrace();
								sendMsg(message, "‚ö†\t –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ");
								player.setState(Player.State.awaitingCommands);
							}
							catch (IndexOutOfBoundsException ee)
							{
								ee.printStackTrace();
								sendMsg(message, "‚ö†\t –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID");
								player.setState(Player.State.awaitingCommands);
							}
						}
						else if (player.getState() == Player.State.awaitingCommands)
						{
							String getText = message.getText();
							//–Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ /start –∏ —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞–ª–æ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
							//FIX HERE
							if (getText.equals("/start"))
							{

							}
							else
							{
								sendMsg(message, "‚ö†\t –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
							}
						}
						else if (player.getState() == Player.State.awaitingChangeNickname)
						{
							String nickname = message.getText();
							if (nickname.matches(usernameTemplate))
							{
								player.setUsername(nickname);
								sendMsg(message, "–í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ " + "`" + player.getUsername() + "`");
								player.setState(Player.State.awaitingCommands);
								playerDAO.update(player.getId(), player);
							}
							else
							{
								sendMsg(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫");
								player.setState(Player.State.awaitingChangeNickname);
							}

						}
						else if (player.getState() == Player.State.casinoDash)
						{
							String newDash = message.getText();

							if (newDash.equals("1"))
							{
								//sendMsg(message, casino.roll());
								//casino.check(Integer.parseInt(newDash), player);
								player.setState(Player.State.awaitingCommands);
							}
							else if (newDash.equals("2"))
							{
								//sendMsg(message, casino.roll());
								//casino.check(Integer.parseInt(newDash), player);
								player.setState(Player.State.awaitingCommands);
							}
						}
					}
					break;
				// —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –ø–æ—Ç–æ–º –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ –Ω–æ–≤—ã–π ID

				//–ù—É –∏ —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ –ø–æ–∫–∞ —á—Ç–æ, —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å /find –∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–∞—Ç—É –Ω—É–∂–Ω–æ –∏ –≤—Ä–µ–º—è

			}
		}

	}

	//–∫–Ω–æ–ø–∫–∏

	public void setButtons(SendMessage sendMessage)
	{
		Player player = players.get(sendMessage.getChatId());
		//–∏–Ω–∏—Ü–∏–∞–ª–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
		ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
		//—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
		sendMessage.setReplyMarkup(replyKeyboardMarkup);
		//–≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤–∏–¥–µ–ª –∏–ª–∏ –Ω–µ—Ç)
		replyKeyboardMarkup.setSelective(true);
		replyKeyboardMarkup.setResizeKeyboard(true);
		//—Å–∫—Ä—ã–≤–∞—Ç—å –∏–ª–∏ –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
		replyKeyboardMarkup.setOneTimeKeyboard(true);

		List<KeyboardRow> keyboardRowList = new ArrayList<>();
		KeyboardRow keyboardFirstRow = new KeyboardRow();

		//–¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–µ—Ä–≤—ã–π —Ä—è–¥
		//KeyboardButton startButton = new KeyboardButton("/start");

		if (players.containsKey(player))
		{
			keyboardFirstRow.add(new KeyboardButton("/start"));

		}
		else
		{
			keyboardFirstRow.add(new KeyboardButton("/help"));
		}

		//keyboardFirstRow.add(new KeyboardButton("/find"));
		//–¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ø–∏–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
		keyboardRowList.add(keyboardFirstRow);
		replyKeyboardMarkup.setKeyboard(keyboardRowList);

	}

	//—á—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
	public static void readFile() throws FileNotFoundException
	{
		scanner = new Scanner(token);

		while (scanner.hasNextLine())
		{
			tokBot = scanner.nextLine();
		}
	}

	public String getBotUsername()
	{
		return "Needle";
	}

	public String getBotToken()
	{
		return tokBot;
		//—Ç–æ–∫–µ–Ω —Ä–µ–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç —Å–∞–º–æ–≥–æ —Ç–≥ BotFather, —Ç–∞–º –∂–µ –ø–∏—à–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–æ–∫–µ–Ω
	}
}
